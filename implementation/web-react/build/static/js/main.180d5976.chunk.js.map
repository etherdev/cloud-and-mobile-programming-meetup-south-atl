{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","email","first_name","note","phone","last_name","editing","users","onUserCreate","bind","assertThisInitialized","onUserEditClick","onUserUpdate","onEditCancel","handleChange","_this2","fetch","then","json","setState","catch","err","console","log","e","objectSpread","target","name","value","preventDefault","_this3","method","body","JSON","stringify","headers","Content-Type","res","toConsumableArray","push","_this4","formData","concat","id","newUsers","map","u","_this5","_this6","_this$state","react_default","a","createElement","className","length","key","onClick","type","required","placeholder","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.180d5976.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: {\n        email: '',\n        first_name: '',\n        note: '',\n        phone: '',\n        last_name: '',\n      },\n      editing: false,\n      users: [],\n    };\n\n    this.onUserCreate = this.onUserCreate.bind(this);\n    this.onUserEditClick = this.onUserEditClick.bind(this);\n    this.onUserUpdate = this.onUserUpdate.bind(this);\n    this.onEditCancel = this.onEditCancel.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('http://0.0.0.0:9292/api/v1/users/')\n      .then((data) => data.json())\n      .then((data) => {\n        this.setState({\n          users: data.users,\n        });\n      })\n      .catch((err) => {\n        console.log('err')\n      })\n  }\n\n  handleChange(e) {\n    const data = {...this.state.data};\n    data[e.target.name] = e.target.value;\n\n    this.setState({ data });\n  }\n\n  onEditCancel(e) {\n    e.preventDefault();\n    this.setState({\n      editing: false,\n      data: {\n        first_name: '',\n        last_name: '',\n        phone: '',\n        email: '',\n        note: '',\n      },\n    });\n  }\n\n  onUserCreate(e) {\n    const { data } = this.state;\n    e.preventDefault();\n\n    fetch('http://0.0.0.0:9292/api/v1/users/', {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'text/plain'\n      },\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        let users = [...this.state.users];\n        users.push(res);\n        this.setState({\n          users,\n          data: {\n            email: '',\n            first_name: '',\n            last_name: '',\n            phone: '',\n            note: '',\n          }\n        });\n      })\n  }\n\n  onUserUpdate(e) {\n    e.preventDefault();\n\n    const {\n      data,\n    } = this.state;\n\n    const formData = {...data};\n\n    fetch(`http://0.0.0.0:9292/api/v1/users/${data.id}/`, {\n      method: 'POST',\n      body: JSON.stringify(formData),\n      headers: {\n        'Content-Type': 'text/plain'\n      },\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        let newUsers = [...this.state.users];\n        this.setState({\n          editing: false,\n          data: {\n            first_name: '',\n            last_name: '',\n            phone: '',\n            email: '',\n            note: '',\n          },\n          users: newUsers.map(u => (u.id === data.id ? res : u)),\n        });\n      })\n  }\n\n  onUserEditClick(e, id) {\n    e.preventDefault();\n\n    fetch(`http://0.0.0.0:9292/api/v1/users/${id}/`)\n      .then((res) => res.json())\n      .then((res) => {\n        const data = res;\n        this.setState({ data });\n      })\n\n    this.setState({\n      editing: true,\n    });\n  }\n\n  render() {\n    const {\n      data,\n      editing,\n      users,\n    } = this.state;\n\n    const {\n      email,\n      first_name,\n      note,\n      phone,\n      last_name,\n    } = data;\n\n    return (\n      <div className=\"App\">\n        { users.length === 0 ? <p>No users yet!</p> : null }\n        <table>\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>First Name</th>\n              <th>Last Name</th>\n              <th>Phone</th>\n              <th>Note</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              users.map((u) => {\n                return (\n                  <tr key={u.id}>\n                    <td>{u.id}</td>\n                    <td>{u.first_name}</td>\n                    <td>{u.last_name}</td>\n                    <td>{u.phone}</td>\n                    <td>{u.note}</td>\n                    <td><button onClick={e => this.onUserEditClick(e, u.id)}>Edit</button></td>\n                  </tr>\n                );\n              })\n            }\n          </tbody>\n        </table>\n        <hr />\n        <h2>{editing ? 'Edit' : 'Add'} A User</h2>\n        <form>\n          <input type=\"text\" required placeholder=\"First Name\" onChange={this.handleChange} value={first_name} name=\"first_name\" />\n          <input type=\"text\" required placeholder=\"Last Name\" onChange={this.handleChange} value={last_name} name=\"last_name\" />\n          <input type=\"text\" required placeholder=\"Email\" onChange={this.handleChange} value={email} name=\"email\" />\n          <input type=\"text\" required placeholder=\"Phone\" onChange={this.handleChange} value={phone} name=\"phone\" />\n          <input type=\"text\" required placeholder=\"Note\" onChange={this.handleChange} value={note} name=\"note\" />\n          <input type=\"submit\" value={editing ? 'Save' : 'Submit'} onClick={editing ? this.onUserUpdate : this.onUserCreate} />\n          { editing ? <button onClick={this.onEditCancel}>Cancel</button> : null}\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}